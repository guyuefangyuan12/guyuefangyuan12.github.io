<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>心算挑战</title>
    <link href="/2024/08/01/%E5%BF%83%E7%AE%97%E6%8C%91%E6%88%98/"/>
    <url>/2024/08/01/%E5%BF%83%E7%AE%97%E6%8C%91%E6%88%98/</url>
    
    <content type="html"><![CDATA[<h1 id="leetcode"><a href="#leetcode" class="headerlink" title="leetcode"></a>leetcode</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>从 N 张卡牌中选出 <code>cnt</code>张卡牌，若这<code>cnt</code>张卡牌数字总和为偶数，则选手成绩「有效」且得分为<code>cnt</code>张卡牌数字总和。 给定数组<code>cards</code>和<code> cnt</code>，其中<code>cards[i]</code>表示第<code>i</code>张卡牌上的数字。 请帮参赛选手计算最大的有效得分。若不存在获取有效得分的卡牌方案，则返回 0。</p><p>当我看到这个题目时，第一个想法是记忆化递归，因此开始对题目进行分析。</p><p>首先，题目可以看成是在<code>0</code>-<code>n-1</code>这<code>n</code>个数中选择<code>cnt</code>个数，使其和为偶数且最大。因此对第<code>n-1</code>个数有以下两种选择</p><ul><li>选择第<code>n-1</code>个数<ul><li>如果<code>cards[n-1]</code>为偶数，则问题就变为在<code>0</code>-<code>n-2</code>这<code>n-1</code>个数中选择<code>cnt-1</code>个数，使其和为偶数且最大。</li><li>如果<code>cards[n-1]</code>为奇数，则问题就变为在<code>0</code>-<code>n-2</code>这<code>n-1</code>个数中选择<code>cnt-1</code>个数，使其和为奇数且最大。</li></ul></li><li>不选择第<code>n-1</code>个数，则问题就变为在<code>0</code>-<code>n-2</code>这<code>n-1</code>个数中选择<code>cnt</code>个数，使其和为偶数且最大。</li></ul><p>因此这个问题就变为了在<code>0</code>-<code>i</code>这<code>i+1</code>个数中选择<code>j</code>个数，使其和为偶数&#x2F;奇数且最大。然后对这个问题进行递归即可。</p><p>因此定义<code>dfs(i,j,k)</code>为递归函数，当<code>k</code>为0时，表示要和为偶数，为<code>1</code>时，表示和要为奇数，返回值为在<code>0</code>-<code>i</code>这<code>i+1</code>个数中选择<code>j</code>个数，使其和为偶数&#x2F;奇数时的最大值。</p><p>递归边界为<code>i</code>&lt;0,返回值为0.</p><p>递归关系式为</p><ul><li><code>j</code>&gt;1<br><code>dfs(i,j,k) = max(dfs(i-1,j,k), dfs(i-1, j-1, (k+cards[i]) % 2) ? dfs(i-1, j-1, (k+cards[i]) % 2)+cards[i] : 0</code></li><li><code>j</code>&#x3D;1<br><code>cards[i] % 2 == k ? cards[i] : dfs(i - 1, j, k)</code>(已经对<code>cards</code>进行过排序)</li></ul><p>最后返回的结果为<code>dfs(n - 1, cnt, 0)</code>.</p><p>然后是对递归记忆化，避免多次计算同一入口条件，最开始使用3位数组<code>cache[i][j][k]</code>进行记忆，但这个数组有很多空间是没有被利用的。于是采用<code>unordered_map&lt;long long, int&gt; cache</code>进行记忆，其<code>key</code>为<code>long long key = k | i &lt;&lt; 1 | j &lt;&lt; 20</code>.</p><p>尽管这样，但最后运行结果超时，表明这种做法不可行。</p><ul><li><code>dfs</code>代码<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++">function&lt;<span class="hljs-type">int</span>(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>)&gt; dfs = [&amp;](<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j, <span class="hljs-type">int</span> k)-&gt;<span class="hljs-type">int</span><br>&#123;<br><span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> flag = k | i &lt;&lt; <span class="hljs-number">1</span> | j &lt;&lt; <span class="hljs-number">20</span>;<br><span class="hljs-keyword">if</span> (!cache.<span class="hljs-built_in">count</span>(flag))<br>&#123;<br><span class="hljs-keyword">if</span> (j == <span class="hljs-number">1</span>)<br>&#123;<br>cache[flag] = (cards[i] % <span class="hljs-number">2</span> == k ? cards[i] : <span class="hljs-built_in">dfs</span>(i - <span class="hljs-number">1</span>, j, k));<br><span class="hljs-keyword">return</span> cache[flag];<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cache[flag] = <span class="hljs-built_in">max</span>(<span class="hljs-built_in">dfs</span>(i - <span class="hljs-number">1</span>, j, k), <span class="hljs-built_in">dfs</span>(i - <span class="hljs-number">1</span>, j - <span class="hljs-number">1</span>, (k + cards[i]) % <span class="hljs-number">2</span>) ? <span class="hljs-built_in">dfs</span>(i - <span class="hljs-number">1</span>, j - <span class="hljs-number">1</span>, (k + cards[i]) % <span class="hljs-number">2</span>) + cards[i] : <span class="hljs-number">0</span>);<br><span class="hljs-keyword">return</span> cache[flag];<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> cache[flag];<br>&#125;<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><p>然后查看提示，发现要使用贪心和排序。经过思考后决定先将数组排序，然后将其分为奇偶两个数组。然后在进行判断。</p><p>在进行判断时要分为多种情况讨论，<code>s_max</code>,<code>d_max1</code>,<code>d_max2</code>分别为最大两个奇数的和，最大的偶数以及最大两个偶数的和。<code>s_pos</code>,<code>d_pos</code>分别表示还未使用的最大奇数下标以及还未使用的最大偶数下标。</p><p>以下是几种需要讨论的情况</p><ul><li><code>cnt</code>为1时，需要判断是否还有偶数</li><li>只剩两个偶数时</li><li>只剩一个偶数时</li><li>没有偶数时</li><li>偶数数量大于2时（这是一般情况，只需要比较<code>s_max</code>,<code>d_max1</code>,<code>d_max2</code>的大小进行判断即可）</li></ul><p>其他特殊情况需要综合还未使用的奇数数量，还未使用的偶数数量以及还有多少的数没有选择。</p><ul><li>奇偶数组的判断代码<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">while</span> (cnt)<br>&#123;<br><span class="hljs-type">int</span> s_max = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> d_max1 = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> d_max2 = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (cnt == <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (d_pos &gt;= <span class="hljs-number">0</span>)<br>&#123;<br>ans += d[d_pos];<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>ans = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (s_pos &gt; <span class="hljs-number">0</span>)<br>&#123;<br>s_max = s[s_pos] + s[s_pos - <span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-keyword">if</span> (d_pos &gt; <span class="hljs-number">1</span>)<br>&#123;<br>d_max1 = d[d_pos];<br>d_max2 = d[d_pos] + d[d_pos - <span class="hljs-number">1</span>];<br><span class="hljs-keyword">if</span> (d_max1 &gt;= s_max)<br>&#123;<br>ans += d_max1;<br>d_pos--;<br>cnt--;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (d_max2 &gt; s_max)<br>&#123;<br>ans += d_max2;<br>d_pos -= <span class="hljs-number">2</span>;<br>cnt -= <span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>ans += s_max;<br>s_pos -= <span class="hljs-number">2</span>;<br>cnt -= <span class="hljs-number">2</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (d_pos == <span class="hljs-number">1</span>)<br>&#123;<br>d_max1 = d[d_pos];<br>d_max2 = d[d_pos] + d[d_pos - <span class="hljs-number">1</span>];<br><span class="hljs-keyword">if</span> (s_max &gt; d_max2)<br>&#123;<br>ans += s_max;<br>s_pos -= <span class="hljs-number">2</span>;<br>cnt -= <span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (d_max1 &gt;= s_max)<br>&#123;<br>ans += d_max1;<br>d_pos--;<br>cnt--;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">if</span> ((cnt - <span class="hljs-number">2</span>) % <span class="hljs-number">2</span>)<br>&#123;<br>ans += d_max1;<br>d_pos--;<br>cnt--;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">if</span> (cnt - <span class="hljs-number">2</span> &lt;= s_pos + <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = s_pos; i &gt;= s_pos + <span class="hljs-number">3</span> - cnt; i--)<br>&#123;<br>ans += s[i];<br>&#125;<br>ans += d_max2;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (d_pos == <span class="hljs-number">0</span>)<br>&#123;<br>d_max1 = d[d_pos];<br><span class="hljs-keyword">if</span> (s_max &gt; d_max1)<br>&#123;<br>ans += s_max;<br>s_pos -= <span class="hljs-number">2</span>;<br>cnt -= <span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">if</span> ((cnt - <span class="hljs-number">1</span>) % <span class="hljs-number">2</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (cnt &lt;= s_pos + <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = s_pos; i &gt;= s_pos + <span class="hljs-number">1</span> - cnt; i--)<br>&#123;<br>ans += s[i];<br>&#125;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">if</span> (cnt - <span class="hljs-number">1</span> &lt;= s_pos + <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = s_pos; i &gt;= s_pos + <span class="hljs-number">2</span> - cnt; i--)<br>&#123;<br>ans += s[i];<br>&#125;<br>ans += d_max1;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (d_pos &lt; <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (cnt % <span class="hljs-number">2</span>)<br>&#123;<br>ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">if</span> (cnt &lt;= s_pos + <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = s_pos; i &gt;= s_pos + <span class="hljs-number">1</span> - cnt; i--)<br>&#123;<br>ans += s[i];<br>&#125;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>这个思路比较容易想到，但其特殊情况很多，需要经过很多判断，非常烦人，很容易出现一望一些特殊情况。</p><p>查看题解后，发现了一个更加简单的方法，不需要考虑很多特殊情况。</p><p>首先将数组进行排序，然后取最大的<code>cnt</code>个数相加得到<code>ans</code>.然后根据<code>ans</code>进行判断</p><ul><li>如果<code>ans</code>为偶数，则直接返回</li><li>如果<code>ans</code>为奇数，则有以下两种情况<ul><li><code>ans</code>减去已使用过数中的最小偶数，加上一个未使用过的最大奇数</li><li><code>ans</code>减去已使用过数中的最小奇数，加上一个未使用过的最大偶数<br>将以上两种情况得到的值取最大即为<code>ans</code>，但以上两种不一定都会出现，需要进行判断，如果两种情况都不出现，则没有符合条件的结果，返回0.</li></ul></li></ul><p>以下代码中<code>pos1</code>,<code>pos2</code>分别为已使用过的数中最小奇数和最小偶数的下标，<code>pos3</code>,<code>pos4</code>分别为未使用过的数中最大奇数和最大偶数的下标。如果下标值为<code>n</code>,则表明不存在这样的数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= n  - cnt; i--)<br>&#123;<br><span class="hljs-keyword">if</span> (cards[i] % <span class="hljs-number">2</span>)<br>&#123;<br>pos1 = i;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>pos2 = i;<br>&#125;<br>ans += cards[i];<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span> - cnt; i &gt;= <span class="hljs-number">0</span>; i--)<br>&#123;<br><span class="hljs-keyword">if</span> ((cards[i] % <span class="hljs-number">2</span>) &amp;&amp; pos3 == n)<br>&#123;<br>pos3 = i;<br>&#125;<br><span class="hljs-keyword">if</span> (!(cards[i] % <span class="hljs-number">2</span>) &amp;&amp; pos4 == n)<br>&#123;<br>pos4 = i;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (ans % <span class="hljs-number">2</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (pos3 == n)<br>&#123;<br><span class="hljs-keyword">if</span> (pos4 == n)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>ans = ans - cards[pos1] + cards[pos4];<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">if</span> (pos4 == n)<br>&#123;<br><span class="hljs-keyword">if</span> (pos2 != n)<br>&#123;<br>ans = ans - cards[pos2] + cards[pos3];<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">if</span> (pos2 != n)<br>&#123;<br>ans = <span class="hljs-built_in">max</span>(ans - cards[pos2] + cards[pos3], ans - cards[pos1] + cards[pos4]);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>ans = ans - cards[pos1] + cards[pos4];<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本来是一道简单题，但是想的太多，反而使其变得更加复杂。（ps:这是第二次打完这段文字，第一次没有保存，导致多花了一个消失，真是糟糕的一天）</p>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>贪心</tag>
      
      <tag>排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快速幂</title>
    <link href="/2024/07/31/%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    <url>/2024/07/31/%E5%BF%AB%E9%80%9F%E5%B9%82/</url>
    
    <content type="html"><![CDATA[<h1 id="leetcode"><a href="#leetcode" class="headerlink" title="leetcode"></a>leetcode</h1><ul><li>快速幂</li></ul><p>普通的幂运算每次只只乘上一次，比如计算<code>pow(2,64)</code>就要循环64次。这样的时间复杂度很高，而快速幂则可以减少运算的复杂度</p><p>对于快速幂算法而言，<code>pow(x,y)</code>,我们可以把<code>y</code>看成一个二进制数,然后我们以次求出<code>pow(x,1)</code>,<code>pow(x,2)</code>,<code>pow(x,4)</code>,…以此类推，然后我们查看<code>y</code>对应二进制数的每一位，如果为0,则当前数就要乘上<code>x</code>对应二进制的幂。</p><p>例如<code>y=13</code>,它对应的二进制数为<code>1101</code>,则<code>pow(x,13)</code>就为<code>pow(x,8)</code>、<code>pow(x,4)</code>、<code>pow(x,1)</code>之和。</p><ul><li>算法对应的C++代码</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fastpow</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> ans = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (y) <br>&#123;<br><span class="hljs-keyword">if</span> (y &amp; <span class="hljs-number">1</span>) <br>&#123;<br>ans *= x;<br>&#125;<br>x *= x;<br>&#125;<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>关于取余的一些技巧 </p><ul><li>加法取余</li></ul><p><code>(a+b)%c=((a%c)+(b%c))%c</code></p><p>适合与很多个数相加时，最后的很大，无法存下，就将取余操作放在每次相加后，避免数据过大溢出</p><ul><li>乘法取余</li></ul><p><code>(a*b)%c=((a*c)+(b*c))%c</code></p><p>同样也是为了避免相乘后数据溢出，就将取余操作放在每次相乘之后</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>快速幂</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
